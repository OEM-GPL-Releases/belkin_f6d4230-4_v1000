/*
 * (C) Copyright 2003
 * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <common.h>
#include <command.h>
#include <malloc.h>
#include <devices.h>
#include <version.h>
#include <net.h>
#include <environment.h>
#include <asm/mipsregs.h>
#include <rt_mmap.h>

DECLARE_GLOBAL_DATA_PTR;
#undef DEBUG

ulong rt2880_uboot_code_start_addr;
ulong *rt2880_top_dram_addr = (ulong *)CFG_EMBEDED_SRAM_START;
int modifies= 0;

#ifdef DEBUG
   #define DATE      "05/25/2006"
   #define VERSION   "v0.00e04"
#endif
#if ( ((CFG_ENV_ADDR+CFG_ENV_SIZE) < CFG_MONITOR_BASE) || \
      (CFG_ENV_ADDR >= (CFG_MONITOR_BASE + CFG_MONITOR_LEN)) ) || \
    defined(CFG_ENV_IS_IN_NVRAM)
#define	TOTAL_MALLOC_LEN	(CFG_MALLOC_LEN + CFG_ENV_SIZE)
#else
#define	TOTAL_MALLOC_LEN	CFG_MALLOC_LEN
#endif
#define ARGV_LEN  0x32


extern int timer_init(void);

extern void  rt2880_eth_halt(struct eth_device* dev);

//extern void pci_init(void);

extern int incaip_set_cpuclk(void);
extern int do_bootm (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
extern int do_tftpb (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
extern int do_mem_cp ( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
extern int flash_sect_protect (int p, ulong addr_first, ulong addr_last);
int flash_sect_erase (ulong addr_first, ulong addr_last);
extern int do_reset(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
extern void input_value(u8 *str);

extern struct eth_device* 	rt2880_pdev;

extern ulong uboot_end_data;
extern ulong uboot_end;


ulong monitor_flash_len;

const char version_string[] =
	U_BOOT_VERSION" (" __DATE__ " - " __TIME__ ")";

static char *failed = "*** failed ***\n";

extern ulong load_addr; /* Default Load Address */


unsigned long mips_cpu_feq;
unsigned long mips_bus_feq;


/*
 * Begin and End of memory area for malloc(), and current "brk"
 */
static ulong mem_malloc_start;
static ulong mem_malloc_end;
static ulong mem_malloc_brk;

static char  file_name_space[ARGV_LEN];

/* kaikerho added ++, 2007.5.29. */
#define read_32bit_cp0_register_with_select1(source)                         \
({ int __res;                                                   \
        __asm__ __volatile__(                                   \
        ".set\tpush\n\t"                                        \
        ".set\treorder\n\t"                                     \
        "mfc0\t%0,"STR(source)",1\n\t"                            \
        ".set\tpop"                                             \
        : "=r" (__res));                                        \
        __res;})


static void Init_System_Mode(void)
{
	u32 reg;
#if defined(RT2880_ASIC_BOARD) || defined(RT2883_ASIC_BOARD) || defined(RT3052_ASIC_BOARD)
	u8	clk_sel;
#endif
	reg = RT2882_REG(RT2880_SYSCFG_REG);
		
	/* 
	 * CPU_CLK_SEL (bit 21:20)
	 */
#ifdef RT2880_FPGA_BOARD
	mips_cpu_feq = 25 * 1000 *1000;
	mips_bus_feq = mips_cpu_feq/2;
#elif defined (RT2883_FPGA_BOARD) || defined (RT3052_FPGA_BOARD)
	mips_cpu_feq = 40 * 1000 *1000;
	mips_bus_feq = mips_cpu_feq/3;
#elif defined (RT2883_ASIC_BOARD) 
	clk_sel = (reg>>20) & 0x03;
	switch(clk_sel) {
		case 0:
			mips_cpu_feq = (380*1000*1000);
			break;
		case 1:
			mips_cpu_feq = (400*1000*1000);
			break;
		case 2:
			mips_cpu_feq = (420*1000*1000);
			break;
		case 3:
			mips_cpu_feq = (430*1000*1000);
			break;
	}
	mips_bus_feq = mips_cpu_feq/2;
#elif defined(RT3052_ASIC_BOARD)
        clk_sel = (reg>>18) & 0x01;
        switch(clk_sel) {
                case 0:
                        mips_cpu_feq = (320*1000*1000);
                        break;
                case 1:
                        mips_cpu_feq = (384*1000*1000);
                        break;
        }
        mips_bus_feq = mips_cpu_feq / 3;
#else /* RT2880 ASIC version */
	clk_sel = (reg>>20) & 0x03;
	switch(clk_sel) {
		#ifdef RT2880_MP
			case 0:
			mips_cpu_feq = (250*1000*1000);
			break;
		case 1:
			mips_cpu_feq = (266*1000*1000);
			break;
		case 2:
			mips_cpu_feq = (280*1000*1000);
			break;
		case 3:
			mips_cpu_feq = (300*1000*1000);
			break;
		#else
			case 0:
			mips_cpu_feq = (233*1000*1000);
			break;
		case 1:
			mips_cpu_feq = (250*1000*1000);
			break;
		case 2:
			mips_cpu_feq = (266*1000*1000);
			break;
		case 3:
			mips_cpu_feq = (280*1000*1000);
			break;
		
		#endif
	}
	mips_bus_feq = mips_cpu_feq/2;
#endif

   	//RT2882_REG(RT2880_SYSCFG_REG) = reg;

}


/*
 * The Malloc area is immediately below the monitor copy in DRAM
 */
static void mem_malloc_init (void)
{

	ulong dest_addr = CFG_MONITOR_BASE + gd->reloc_off;

	mem_malloc_end = dest_addr;
	mem_malloc_start = dest_addr - TOTAL_MALLOC_LEN;
	mem_malloc_brk = mem_malloc_start;

	memset ((void *) mem_malloc_start,
		0,
		mem_malloc_end - mem_malloc_start);
}

void *sbrk (ptrdiff_t increment)
{
	ulong old = mem_malloc_brk;
	ulong new = old + increment;

	if ((new < mem_malloc_start) || (new > mem_malloc_end)) {
		return (NULL);
	}
	mem_malloc_brk = new;
	return ((void *) old);
}


static int init_func_ram (void)
{

#ifdef	CONFIG_BOARD_TYPES
	int board_type = gd->board_type;
#else
	int board_type = 0;	/* use dummy arg */
#endif
	puts ("DRAM:  ");

	if ((gd->ram_size = initdram (board_type)) > 0) {
		print_size (gd->ram_size, "\n");
		return (0);  
	}
	puts (failed);
	return (1);
}

static int display_banner(void)
{
   
	printf ("\n\n%s\n\n", version_string);
	return (0);
}

/*
static void display_flash_config(ulong size)
{
	puts ("Flash: ");
	print_size (size, "\n");
}
*/

static int init_baudrate (void)
{
	//uchar tmp[64]; /* long enough for environment variables */
	//int i = getenv_r ("baudrate", tmp, sizeof (tmp));
	//kaiker 
	gd->baudrate = CONFIG_BAUDRATE;
/*
	gd->baudrate = (i > 0)
			? (int) simple_strtoul (tmp, NULL, 10)
			: CONFIG_BAUDRATE;
*/
	return (0);
}


/*
 * Breath some life into the board...
 *
 * The first part of initialization is running from Flash memory;
 * its main purpose is to initialize the RAM so that we
 * can relocate the monitor code to RAM.
 */

/*
 * All attempts to come up with a "common" initialization sequence
 * that works for all boards and architectures failed: some of the
 * requirements are just _too_ different. To get rid of the resulting
 * mess of board dependend #ifdef'ed code we now make the whole
 * initialization sequence configurable to the user.
 *
 * The requirements for any new initalization function is simple: it
 * receives a pointer to the "global data" structure as it's only
 * argument, and returns an integer return code, where 0 means
 * "continue" and != 0 means "fatal error, hang the system".
 */
typedef int (init_fnc_t) (void);

init_fnc_t *init_sequence[] = {
	timer_init,
	env_init,		/* initialize environment */
	init_baudrate,		/* initialze baudrate settings */
	serial_init,		/* serial communications setup */
	console_init_f,
	display_banner,		/* say that we are here */
	checkboard,
	init_func_ram,
	NULL,
};


//  
void board_init_f(ulong bootflag)
{
	gd_t gd_data, *id;
	bd_t *bd;  
	//init_fnc_t **init_fnc_ptr;
	//unsigned long  *pio_mode = (unsigned long  *)(0x00300624);
	ulong addr, addr_sp, len = (ulong)&uboot_end - CFG_MONITOR_BASE;
  
#ifdef CONFIG_PURPLE
	void copy_code (ulong); 
#endif
	//*pio_mode = 0xFFFF;
		
	/* Pointer is writable since we allocated a register for it.
	 */
	gd = &gd_data;
	/* compiler optimization barrier needed for GCC >= 3.4 */
	__asm__ __volatile__("": : :"memory");
	
		
	memset ((void *)gd, 0, sizeof (gd_t));

#if 1	
	timer_init();
	
	env_init();		/* initialize environment */

	init_baudrate();		/* initialze baudrate settings */
	
	serial_init();		/* serial communications setup */
	console_init_f();
	display_banner();		/* say that we are here */
	checkboard();

	init_func_ram(); 

#if 1
      {
         u32 value= 0;
         
         /* reset Frame engine */
         value = le32_to_cpu(*(volatile u_long *)(RALINK_SYSCTL_BASE + 0x0034));
         udelay(100);    
#if defined (RT3052_FPGA_BOARD) || defined (RT3052_ASIC_BOARD)
        //2880 -> 3052 reset Frame Engine from 18 to 21
        value |= (1 << 21);
#else
        value |= (1 << 18);
#endif
   	 *(volatile u_long *)(RALINK_SYSCTL_BASE + 0x0034) = cpu_to_le32(value);	
         udelay(200);      
      }         
#endif
	
	
#endif	

#if 0	
	for (init_fnc_ptr = init_sequence; *init_fnc_ptr; ++init_fnc_ptr) {
	
		if ((*init_fnc_ptr)() != 0) {
			hang ();
		}
	}
#endif
#ifdef DEBUG	
   debug("rt2880 uboot %s %s\n", VERSION, DATE);
#endif

	/*
	 * Now that we have DRAM mapped and working, we can
	 * relocate the code and continue running from DRAM.
	 */
	addr = CFG_SDRAM_BASE + gd->ram_size;

	/* We can reserve some RAM "on top" here.
	 */
#ifdef DEBUG	    
	debug ("SERIAL_CLOCK_DIVISOR =%d \n", SERIAL_CLOCK_DIVISOR);
	debug ("kaiker,,CONFIG_BAUDRATE =%d \n", CONFIG_BAUDRATE); 
	debug ("SDRAM SIZE:%08X\n",gd->ram_size);
#endif

	/* round down to next 4 kB limit.
	 */
	addr &= ~(4096 - 1);
	*rt2880_top_dram_addr = addr;
#ifdef DEBUG
	debug ("Top of RAM usable for U-Boot at: %08lx\n", *rt2880_top_dram_addr);
#endif	 
   
	/* Reserve memory for U-Boot code, data & bss
	 * round down to next 16 kB limit
	 */
	addr -= len;
	addr &= ~(16 * 1024 - 1);
#ifdef DEBUG
	debug ("Reserving %ldk for U-Boot at: %08lx\n", len >> 10, addr);
#endif
	 /* Reserve memory for malloc() arena.
	 */
	addr_sp = addr - TOTAL_MALLOC_LEN;
#ifdef DEBUG
	debug ("Reserving %dk for malloc() at: %08lx\n",
			TOTAL_MALLOC_LEN >> 10, addr_sp);
#endif
	/*
	 * (permanently) allocate a Board Info struct
	 * and a permanent copy of the "global" data
	 */
	addr_sp -= sizeof(bd_t);
	bd = (bd_t *)addr_sp;
	gd->bd = bd;
#ifdef DEBUG
	debug ("Reserving %d Bytes for Board Info at: %08lx\n",
			sizeof(bd_t), addr_sp);
#endif
	addr_sp -= sizeof(gd_t);
	id = (gd_t *)addr_sp;
#ifdef DEBUG
	debug ("Reserving %d Bytes for Global Data at: %08lx\n",
			sizeof (gd_t), addr_sp);
#endif
 	/* Reserve memory for boot params.
	 */
	addr_sp -= CFG_BOOTPARAMS_LEN;
	bd->bi_boot_params = addr_sp;
#ifdef DEBUG
	debug ("Reserving %dk for boot params() at: %08lx\n",
			CFG_BOOTPARAMS_LEN >> 10, addr_sp);
#endif
	/*
	 * Finally, we set up a new (bigger) stack.
	 *
	 * Leave some safety gap for SP, force alignment on 16 byte boundary
	 * Clear initial stack frame
	 */
	addr_sp -= 16;
	addr_sp &= ~0xF;
	*((ulong *) addr_sp)-- = 0;
	*((ulong *) addr_sp)-- = 0;
#ifdef DEBUG
	debug ("Stack Pointer at: %08lx\n", addr_sp);
#endif

#ifdef DEBUG
	/* Debug, YJ, 5/17/2006 */
   rt2880_say_hello_to_the_world();	
	debug ("YJ debug\n");	
#endif
	/*
	 * Save local variables to board info struct
	 */
	bd->bi_memstart	= CFG_SDRAM_BASE;	/* start of  DRAM memory */
	bd->bi_memsize	= gd->ram_size;		/* size  of  DRAM memory in bytes */
	bd->bi_baudrate	= gd->baudrate;		/* Console Baudrate */

#ifdef RALINK_MEMORY_TEST_FUN
	//New add by kaiker for memtest
	bd->bi_reallocate_image_addr = addr_sp;
	bd->bi_total_image_size = bd->bi_memstart + bd->bi_memsize - addr_sp;
	debug("\n bd->bi_reallocate_image_addr = 0x%08X\n",bd->bi_reallocate_image_addr);
	debug("\n bd->bi_total_image_size = 0x%08X\n",bd->bi_total_image_size);
#endif

	memcpy (id, (void *)gd, sizeof (gd_t));

	/* On the purple board we copy the code in a special way
	 * in order to solve flash problems
	 */

	//KKK = flash_init();
#ifdef CONFIG_PURPLE

	copy_code(addr);
#endif

#if defined(CFG_RUN_CODE_IN_RAM)
	/* 
	 * tricky: relocate code to original TEXT_BASE
	 * for ICE souce level debuggind mode 
	 */	
	debug ("relocate_code Pointer at: %08lx\n", addr);
	relocate_code (addr_sp, id, /*TEXT_BASE*/ addr);	
#else
	debug ("relocate_code Pointer at: %08lx\n", addr);
	relocate_code (addr_sp, id, addr);
#endif

	/* NOTREACHED - relocate_code() does not return */
}

#ifdef DEBUG
void rt2880_say_hello_to_the_world (void)
{
	char rt2880_hello[38]= "RaLink 2880 says Hello to the World !!";
   int loop, num;           
   
   for(loop=0; loop<0x1; loop++)
      for(num=0; num<38; num++)
         rt2880_serial_putc(rt2880_hello[num]);
}

/*
 * Output a single byte to the serial port.
 */
void rt2880_serial_putc (const char c)
{
   #define io_p2v(PhAdd)    (PhAdd)
   #define __REG(x) io_p2v(x)
   #define __REG(x) (*((volatile u32 *)io_p2v(x)))
   
   #define RT2880_UART_TBR_OFFSET 0x04
   #define RT2880_UART_LSR_OFFSET 0x1C
   #define RT2880_CHIP_REG_CFG_BASE (RALINK_SYSCTL_BASE)
   #define RT2880_UART_CFG_BASE (RT2880_CHIP_REG_CFG_BASE)
   
   #define RT2880_UART2 0x0C00  /* UART Lite */
   #define CFG_RT2880_CONSOLE RT2880_UART2   /* we use UART Lite for console */
   
   #define LSR(x)  __REG(RT2880_UART_CFG_BASE+(x)+RT2880_UART_LSR_OFFSET)
   #define TBR(x)  __REG(RT2880_UART_CFG_BASE+(x)+RT2880_UART_TBR_OFFSET)
   
   #define LSR_TEMT (1 << 6) /* Transmitter Empty */

    /* wait for room in the tx FIFO on UART */
    while ((LSR(CFG_RT2880_CONSOLE) & LSR_TEMT) == 0);

    TBR(CFG_RT2880_CONSOLE) = c;

    /* If \n, also do \r */
    if (c == '\n')
        rt2880_serial_putc ('\r');
}
#endif

#define SEL_LOAD_LINUX_SDRAM            1
#define SEL_LOAD_LINUX_WRITE_FLASH      2
#define SEL_BOOT_FLASH                  3
#define SEL_ENTER_CLI                   4
#define SEL_LOAD_UCOS_SDRAM		5
#define SEL_LOAD_CRAMFS_WRITE_FLASH     7
#define SEL_LOAD_BOOT_SDRAM             8
#define SEL_LOAD_BOOT_WRITE_FLASH       9


void OperationSelect(void)
{
   printf("\nPlease choose the operation: \n");
   printf("   %d: Load system code to SDRAM via TFTP. \n", SEL_LOAD_LINUX_SDRAM);
   printf("   %d: Load system code then write to Flash via TFTP. \n", SEL_LOAD_LINUX_WRITE_FLASH);
   printf("   %d: Boot system code via Flash (default).\n", SEL_BOOT_FLASH);
   printf("   %d: Entr boot command line interface.\n", SEL_ENTER_CLI);
// printf("   %d: Load ucos code to SDRAM via TFTP. \n", SEL_LOAD_UCOS_SDRAM);
// printf("   %d: Load Linux filesystem then write to Flash via TFTP. \n", SEL_LOAD_CRAMFS_WRITE_FLASH);
   printf("   %d: Load Boot Loader code to SDRAM via TFTP. \n", SEL_LOAD_BOOT_SDRAM);
   printf("   %d: Load Boot Loader code then write to Flash via TFTP. \n", SEL_LOAD_BOOT_WRITE_FLASH);
}

void filename_copy (uchar *dst, uchar *src, int size)
{
   *dst = '"';
   dst++;
	while ((size > 0) && *src && (*src != '"')) {
		*dst++ = *src++;
		size--;
	}
	*dst++ = '"';
	*dst = '\0';
}

int tftp_config_no_input(int type, char *argv[])
{
	char *s;
	char file[ARGV_LEN], devip[ARGV_LEN], srvip[ARGV_LEN];
	int i;

   //*s = '"';
   for(i=0; i<ARGV_LEN; i++) {
      file[i]= '"';
      devip[i] = '"';
      srvip[i] = '"';
   }
#ifdef DEBUG
   printf("file= %s\n", file);
#endif
   printf(" Please Input new ones /or Ctrl-C to discard\n");
	
   printf("\tInput device IP ");
	s = getenv("ipaddr");
	printf("(%s) ", s);
	//input_value(devip);
	if(devip[0] != '"') {
	   if( strcmp(s, devip) != 0) {
         setenv ("ipaddr", devip);
         modifies++;
      }
   } else
      printf("\n");

   printf("\tInput server IP ");
	s = getenv("serverip");
	printf("(%s) ", s);
	//input_value(srvip);
	if(srvip[0] != '"') {
	   if( strcmp(s, srvip) != 0) {
         setenv ("serverip", srvip);
         modifies++;
      }
   } else
      printf("\n");
   if(type == SEL_LOAD_BOOT_SDRAM || type == SEL_LOAD_BOOT_WRITE_FLASH 
	|| type == SEL_LOAD_UCOS_SDRAM) {
      if(type == SEL_LOAD_BOOT_SDRAM)
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
      	argv[1] = "0x8a200000";
#else
      	argv[1] = "0x80200000";
#endif
      else if (type == SEL_LOAD_UCOS_SDRAM)
      	argv[1] = "0x88001000";
      else
         argv[1] = "0x8a100000";
      printf("\tInput Uboot filename ");
      argv[2] = "uboot.bin";
   }
   else if (type == SEL_LOAD_LINUX_SDRAM || type == SEL_LOAD_LINUX_WRITE_FLASH 
            || type == SEL_LOAD_CRAMFS_WRITE_FLASH) {
/* bruce to support ramdisk */
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
      argv[1] = "0x8a800000";
#else
      argv[1] = "0x80800000";
#endif
//      argv[1] = "0x8a100000";
      if(type == SEL_LOAD_CRAMFS_WRITE_FLASH)
         printf("\tInput Linux FileSystem filename ");
      else
         printf("\tInput Linux Kernel filename ");
      argv[2] = "uImage";
   }
	s = getenv("bootfile");
	printf("(%s) ", s);
	//input_value(file);
#ifdef DEBUG				
	printf("file[]= %s\n", file);
#endif				
	if(file[0] != '"') {
	   if( strcmp(s, file) != 0) {
  	      filename_copy (argv[2], file, sizeof(file));
  	   #ifdef DEBUG
  	      printf("%s\n", argv[2]);
      #endif
         setenv ("bootfile", file);
         modifies++;
      }
   } else {
	   printf("\n");
	   if(*s != '"') {
         filename_copy (argv[2], s, sizeof(file));
	   }
   }
   return 1;
}

int tftp_config(int type, char *argv[])
{
	char *s;
	char defaule_file[ARGV_LEN],file[ARGV_LEN], devip[ARGV_LEN], srvip[ARGV_LEN],default_ip[ARGV_LEN];
	int i;

   //*s = '"';
   for(i=0; i<ARGV_LEN; i++) {
      file[i]= '"';
      devip[i] = '"';
      srvip[i] = '"';
   }
#ifdef DEBUG
   printf("file= %s\n", file);
#endif
   printf(" Please Input new ones /or Ctrl-C to discard\n");
	
   printf("\tInput device IP ");
	s = getenv("ipaddr");

	memset(default_ip,0,ARGV_LEN);
	memset(defaule_file,0,ARGV_LEN);
	
	memcpy(default_ip,s,strlen(s));
	
	printf("(%s) ", default_ip);
	input_value(devip);
	if(devip[0] != '"') {
	   if( strcmp(s, devip) != 0) {
         setenv ("ipaddr", devip);
         modifies++;
      }
   } else
   {
      printf("\n");
	  setenv ("ipaddr", default_ip);
   } 

   printf("\tInput server IP ");
	s = getenv("serverip");

	memset(default_ip,0,ARGV_LEN);
	memcpy(default_ip,s,strlen(s));
	
	printf("(%s) ", default_ip);
	input_value(srvip);
	if(srvip[0] != '"') {
	   if( strcmp(s, srvip) != 0) {
         setenv ("serverip", srvip);
         modifies++;
      }
   } else
   {
      printf("\n");
	  setenv ("serverip", default_ip);
   } 

   if(type == SEL_LOAD_BOOT_SDRAM || type == SEL_LOAD_BOOT_WRITE_FLASH 
	|| type == SEL_LOAD_UCOS_SDRAM) {
      if(type == SEL_LOAD_BOOT_SDRAM)
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
      	argv[1] = "0x8a200000";
#else
      	argv[1] = "0x80200000";
#endif
      else if (type == SEL_LOAD_UCOS_SDRAM)
      	argv[1] = "0x88001000";
      else
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
         argv[1] = "0x8a100000";
#else
         argv[1] = "0x80100000";
#endif
      printf("\tInput Uboot filename ");
       //argv[2] = "uboot.bin";
       strncpy(argv[2], "uboot.bin", ARGV_LEN);
   }
   else if (type == SEL_LOAD_LINUX_WRITE_FLASH 
            || type == SEL_LOAD_CRAMFS_WRITE_FLASH) {
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
      argv[1] = "0x8a100000";
#else
      argv[1] = "0x80100000";
#endif
      if(type == SEL_LOAD_CRAMFS_WRITE_FLASH)
         printf("\tInput Linux FileSystem filename ");
      else
         printf("\tInput Linux Kernel filename ");
       //argv[2] = "uImage"; winfred: use strncpy instead to prevent the buffer overflow at filename_copy later
       strncpy(argv[2], "uImage", ARGV_LEN);
   }
   else if (type == SEL_LOAD_LINUX_SDRAM ) {
/* bruce to support ramdisk */
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD)
      argv[1] = "0x8a800000";
#else
      argv[1] = "0x80800000";
#endif
         printf("\tInput Linux Kernel filename ");
        //argv[2] = "uImage";
	strncpy(argv[2], "uImage", ARGV_LEN);
   }
	s = getenv("bootfile");
	memcpy(defaule_file,s,strlen(s));
	printf("(%s) ", defaule_file);
	input_value(file);
#ifdef DEBUG				
	printf("file[]= %s\n", file);
#endif				
	if(file[0] != '"') {
	   if( strcmp(defaule_file, file) != 0) {
  	      filename_copy (argv[2], file, sizeof(file));
  	   #ifdef DEBUG
  	      printf("%s\n", argv[2]);
      #endif
         setenv ("bootfile", file);
         modifies++;
      }
	  else
	  {
		filename_copy (argv[2], file, sizeof(file));
	  }
	   	
   } else {
	   printf("\n");
	   if(*s != '"') {
         filename_copy (argv[2], defaule_file, sizeof(defaule_file));
	   }
   }
   return 1;
}

#ifdef GPIO14_RESET_MODE
void trigger_hw_reset(void)
{

        //set GPIO14 as output to trigger hw reset circuit
        RT2882_REG(RT2880_REG_PIODIR)|=1<<14; //output mode

        RT2882_REG(RT2880_REG_PIODATA)|=1<<14; //pull high
	udelay(100);
        RT2882_REG(RT2880_REG_PIODATA)&=~(1<<14); //pull low

}
#endif

/************************************************************************
 *
 * This is the next part if the initialization sequence: we are now
 * running from RAM and have a "normal" C environment, i. e. global
 * data can be written, BSS has been cleared, the stack size in not
 * that critical any more, etc.
 *
 ************************************************************************
 */

gd_t gd_data;
 
void board_init_r (gd_t *id, ulong dest_addr)
{
	cmd_tbl_t *cmdtp;
	ulong size;
	extern void malloc_bin_reloc (void);
#ifndef CFG_ENV_IS_NOWHERE
	extern char * env_name_spec;
#endif
	char *s, *e;
	bd_t *bd;
	int i;
   	int timer1= CONFIG_BOOTDELAY;
   	unsigned char BootType='3', confirm=0;
   	int my_tmp;
	u32 value,kk;
	char addr_str[11];
	ulong e_end;
 
#if defined (RT2883_FPGA_BOARD) || defined (RT3052_FPGA_BOARD) || defined(RT3052_ASIC_BOARD) ||defined(RT3052_ASIC_BOARD)
 	memcpy((void *)0x807F0000, (void *)gd, sizeof(gd_t));
 	gd = (gd_t *)0x807F0000;//&gd_data;

	u32 config1,lsize,icache_linesz,icache_sets,icache_ways,icache_size;
	u32 dcache_linesz,dcache_sets,dcache_ways,dcache_size;
	
#else
 	memcpy(&gd_data, (void *)gd, sizeof(gd_t));
 	gd = &gd_data;
#endif

 	//debug("\n  New gd=%08X\n",gd);
 	//for(kk=0;kk <0x000fffff;kk++);
 
 	
 	//gd = id;
	gd->flags |= GD_FLG_RELOC;	/* tell others: relocation done */

	Init_System_Mode(); /*  Get CPU rate */

#ifdef GPIO14_RESET_MODE
	u32 reg = RT2882_REG(RT2880_RSTSTAT_REG);
        if(reg & RT2880_WDRST ){
		printf("***********************\n");
		printf("Watchdog Reset Occurred\n");
		printf("***********************\n");
                RT2882_REG(RT2880_RSTSTAT_REG)=RT2880_WDRST;
                trigger_hw_reset();
        }else if(reg & RT2880_SWSYSRST){
		printf("******************************\n");
		printf("Software System Reset Occurred\n");
		printf("******************************\n");
                RT2882_REG(RT2880_RSTSTAT_REG)=RT2880_SWSYSRST;
                trigger_hw_reset();
        }else if (reg & RT2880_SWCPURST){
		printf("***************************\n");
		printf("Software CPU Reset Occurred\n");
		printf("***************************\n");
                RT2882_REG(RT2880_RSTSTAT_REG)=RT2880_SWCPURST;
                trigger_hw_reset();
        }
#endif

#ifdef DEBUG
	debug ("Now running in RAM - U-Boot at: %08lx\n", dest_addr);
#endif
	rt2880_uboot_code_start_addr = dest_addr;
	gd->reloc_off = dest_addr - CFG_MONITOR_BASE;

	monitor_flash_len = (ulong)&uboot_end_data - dest_addr;
#ifdef DEBUG	
	debug("\n monitor_flash_len =%d \n",monitor_flash_len);
#endif	
	/*
	 * We have to relocate the command table manually
	 */
 	for (cmdtp = &__u_boot_cmd_start; cmdtp !=  &__u_boot_cmd_end; cmdtp++) {
		ulong addr;

		addr = (ulong) (cmdtp->cmd) + gd->reloc_off;
#ifdef DEBUG
		printf ("Command \"%s\": 0x%08lx => 0x%08lx\n",
				cmdtp->name, (ulong) (cmdtp->cmd), addr);
#endif
		cmdtp->cmd =
			(int (*)(struct cmd_tbl_s *, int, int, char *[]))addr;

		addr = (ulong)(cmdtp->name) + gd->reloc_off;
		cmdtp->name = (char *)addr;

		if (cmdtp->usage) {
			addr = (ulong)(cmdtp->usage) + gd->reloc_off;
			cmdtp->usage = (char *)addr;
		}
#ifdef	CFG_LONGHELP
		if (cmdtp->help) {
			addr = (ulong)(cmdtp->help) + gd->reloc_off;
			cmdtp->help = (char *)addr;
		}
#endif

	}
	/* there are some other pointer constants we must deal with */
#ifndef CFG_ENV_IS_NOWHERE
	env_name_spec += gd->reloc_off;
#endif

	/* configure available FLASH banks */
	size = flash_init();
//	display_flash_config (size);
  
	bd = gd->bd;
	bd->bi_flashstart = CFG_FLASH_BASE;
	bd->bi_flashsize = size;
#if CFG_MONITOR_BASE == CFG_FLASH_BASE
	bd->bi_flashoffset = monitor_flash_len;	/* reserved area for U-Boot */
#else
	bd->bi_flashoffset = 0;
#endif

	/* initialize malloc() area */
	mem_malloc_init();
	malloc_bin_reloc();

	/* relocate environment function pointers etc. */
	env_relocate();

	/* board MAC address */
	s = getenv ("ethaddr");
	for (i = 0; i < 6; ++i) {
		bd->bi_enetaddr[i] = s ? simple_strtoul (s, &e, 16) : 0;
		if (s)
			s = (*e) ? e + 1 : e;
	}

	/* IP Address */
	bd->bi_ip_addr = getenv_IPaddr("ipaddr");

#if defined(CONFIG_PCI)
	/*
	 * Do pci configuration
	 */
	puts("\n  Do pci configuration  !!\n");
	pci_init();
#endif

/** leave this here (after malloc(), environment and PCI are working) **/
	/* Initialize devices */
	devices_init ();

	jumptable_init ();

	/* Initialize the console (after the relocation and devices init) */
	console_init_r ();
/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

	/* Initialize from environment */
	if ((s = getenv ("loadaddr")) != NULL) {
		load_addr = simple_strtoul (s, NULL, 16);
	}
#if (CONFIG_COMMANDS & CFG_CMD_NET)
	if ((s = getenv ("bootfile")) != NULL) {
		copy_filename (BootFile, s, sizeof (BootFile));
	}
#endif	/* CFG_CMD_NET */

#if defined(CONFIG_MISC_INIT_R)
	/* miscellaneous platform dependent initialisations */
	misc_init_r ();
#endif

   /* RT2880 Boot Loader Menu */
	SHOW_VER_STR();

#if defined (RT2883_FPGA_BOARD) || defined (RT3052_FPGA_BOARD) || defined(RT3052_ASIC_BOARD) ||defined(RT3052_ASIC_BOARD)

	config1 = read_32bit_cp0_register_with_select1(CP0_CONFIG);
	

	
		if ((lsize = ((config1 >> 19) & 7)))
			icache_linesz = 2 << lsize;
		else
			icache_linesz = lsize;
		icache_sets = 64 << ((config1 >> 22) & 7);
		icache_ways = 1 + ((config1 >> 16) & 7);

		icache_size = icache_sets *
		              icache_ways *
		              icache_linesz;
		

		printf("icache: sets:%d, ways:%d, linesz:%d ,total:%d\n", 
		icache_sets, icache_ways, icache_linesz, icache_size);



		/*
		 * Now probe the MIPS32 / MIPS64 data cache.
		 */
		
		if ((lsize = ((config1 >> 10) & 7)))
			dcache_linesz = 2 << lsize;
		else
			dcache_linesz = lsize;
		dcache_sets = 64 << ((config1 >> 13) & 7);
		dcache_ways = 1 + ((config1 >> 7) & 7);

		dcache_size = dcache_sets *
		              dcache_ways *
		              dcache_linesz;
		

		printf("dcache: sets:%d, ways:%d, linesz:%d ,total:%d \n", 
		dcache_sets, dcache_ways, dcache_linesz, dcache_size);




#else
	value = read_32bit_cp0_register_with_select1(CP0_CONFIG);

	kk = value >> 7;
	kk = kk & 0x7;

	if(kk)
	{
		debug(" D-CACHE set to %d way \n",kk + 1);
	}
	else
	{
		debug("\n D-CACHE Direct mapped\n");
	}

	kk = value >> 16;
	kk = kk & 0x7;


	if(kk)
	{
		debug(" I-CACHE set to %d way \n",kk + 1);
	}
	else
	{
		debug("\n I-CACHE Direct mapped\n");
	}
#endif

	debug("\n ##### The CPU freq = %d MHZ #### \n",mips_cpu_feq/1000/1000);


	if(*(volatile u_long *)(RALINK_SYSCTL_BASE + 0x0304) & (1<< 24))
	{

		debug("\n SDRAM bus set to 32 bit \n");
	}
	else
	{
		debug("\nSDRAM bus set to 16 bit \n");
	}
		debug(" SDRAM size =%d Mbytes\n",gd->ram_size /1024/1024 );

#if defined (RT3052_ASIC_BOARD) || defined (RT3052_FPGA_BOARD) //initial cpu + 3052
	RT2882_REG(0xb01100e4) = 0x00000000;
	RT2882_REG(0xb0110014) = 0xffff5555;
	RT2882_REG(0xb0110090) = 0x00007f7f;
	RT2882_REG(0xb0110098) = 0x00007fff; //disable VLAN
	RT2882_REG(0xb011009C) = 0x0008a100; // bit[3:0]=0001=300 sec, 0000=Disable aging
	RT2882_REG(0xb011008C) = 0x02404040; // bit[3:0]=0001=300 sec, 0000=Disable aging
	//RT2882_REG(0xb0000060) = 0x00000000; // pin share mode to normal
#endif

#if defined (RT3052_ASIC_BOARD)
	RT2882_REG(0xb01100C8) = 0x3f506b28; //Change polling Ext PHY Addr=0x0
	RT2882_REG(0xb0110084) = 0x00000000;
#endif
#if defined (RT3052_FPGA_BOARD)
	RT2882_REG(0xb01100C8) = 0x3ff06b28; //Change polling Ext PHY Addr=0x0
	RT2882_REG(0xb0110084) = 0xffdf1f00;
#endif
#if defined (RT3052_ASIC_BOARD) || defined (RT3052_FPGA_BOARD) //initial cpu + 3052
	mii_mgr_write(0, 31, 0x8000);	//---> select port register
	mii_mgr_write(0, 29, 0x5088); 	//---> set port 0 phy
	mii_mgr_write(1, 29, 0x5088);	//---> set port 1 phy
	mii_mgr_write(2, 29, 0x5088);	//---> set port 2 phy
	mii_mgr_write(3, 29, 0x5088); 	//---> set port 3 phy
	mii_mgr_write(4, 29, 0x5088);	//---> set port 4 phy
#endif

   OperationSelect();   

	while (timer1 > 0) {
		int i;
		--timer1;
		/* delay 100 * 10ms */
		for (i=0; i<100; ++i) {
			if ((my_tmp = tstc()) != 0) {	/* we got a key press	*/
				timer1 = 0;	/* no more delay	*/
				BootType = getc();
            if ((BootType < '1' || BootType > '5') && (BootType != '7') && (BootType != '8') && (BootType != '9'))
               BootType = '3';
            printf("\n\rYou choosed %c\n\n", BootType);
				break;
			}
			udelay (10000);
		}
		printf ("\b\b\b%2d ", timer1);
	}
	putc ('\n');

   if(BootType == '3') {
      char *argv[2];
      sprintf(addr_str, "0x%X", CFG_FLASH_BASE + 0x50000);
      argv[1] = &addr_str[0];
      printf("   \n3: System Boot system code via Flash.\n");
      do_bootm(cmdtp, 0, 2, argv);
   }
   else {
       char *argv[3];
       int argc= 3;

       argv[2] = &file_name_space[0];
       memset(file_name_space,0,ARGV_LEN);

   #if (CONFIG_COMMANDS & CFG_CMD_NET) && defined(CONFIG_NET_MULTI)
   	puts ("Net:   ");


   #if 0
      {
        extern u32 Gsw_Read_PHY(u32 phy_register, u32 *read_data);
        extern u32 Gsw_Write_PHY(u32 phy_register, u32 write_data);
   
         /* switch PHY software reset */
         u32 *read_data, reg= 0;
   
         Gsw_Read_PHY(reg, read_data);
         udelay(100);
         *read_data |= (1 << 15 );      	
         Gsw_Write_PHY(reg, *read_data);
         udelay(100);      
         Gsw_Read_PHY(reg, read_data);
         udelay(100);      
         while( *read_data & (1 << 15) ) {
            printf("Giga PHY software reset\n");
            Gsw_Read_PHY(reg, read_data);
            udelay(100);
         }
   	}
   #endif

      eth_initialize(gd->bd);
   	////rt2880_eth_halt(rt2880_pdev);
   #endif

      switch(BootType) {   
         case '1':
            printf("   \n%d: System Load Linux to SDRAM via TFTP. \n", SEL_LOAD_LINUX_SDRAM);
            tftp_config(SEL_LOAD_LINUX_SDRAM, argv);           
            argc= 3;
         	setenv("autostart", "yes");
            do_tftpb(cmdtp, 0, argc, argv);
            break;
 
         case '2':
            printf("   \n%d: System Load Linux Kernel then write to Flash via TFTP. \n", SEL_LOAD_LINUX_WRITE_FLASH);
            printf(" Warning!! Erase Linux in Flash then burn new one. Are you sure?(Y/N)\n");
            confirm = getc();
            if (confirm != 'y' && confirm != 'Y') {
               printf(" Operation terminated\n");
               break;
            }
            tftp_config(SEL_LOAD_LINUX_WRITE_FLASH, argv);
            argc= 3;
           	setenv("autostart", "no");
            do_tftpb(cmdtp, 0, argc, argv);
            
            //erase linux
            if(NetBootFileXferSize <= 0x1B0000) {
		// 0 < linux image <= 0x1B0000
		e_end = CFG_FLASH_BASE + 0x50000 + NetBootFileXferSize;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux kernel block !!\n");
		printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, e_end);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, e_end);
#ifdef ON_BOARD_2M_FLASH_COMPONENT			
	    } else {
		printf("***********************************\n");
		printf("The Image is bigger than 1728KB !! \n");
		printf("***********************************\n");
		break;
#else //4,8,16M
            } else if(NetBootFileXferSize <= 0x3B0000) {
		// 0x1B0000 < linux image <= 0x3B0000
		e_end = CFG_FLASH_BASE + 0x50000 + NetBootFileXferSize;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux kernel block !!\n");
	        printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, e_end);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, e_end);
#ifdef ON_BOARD_4M_FLASH_COMPONENT
	    } else {
		printf("***********************************\n");
		printf("The Image is bigger than 3776KB !! \n");
		printf("***********************************\n");
		break;
#else //8,16M
            } else if(NetBootFileXferSize <= 0x7B0000) {
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD) || defined (RT3052_MP1)
		// 0x3B0000 < linux image <= 0x7B0000
		e_end = PHYS_FLASH_2 + NetBootFileXferSize - 0x3B0000;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux kernel block !!\n");
	        printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, CFG_FLASH_BASE+0x3FFFFF);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, CFG_FLASH_BASE+0x3FFFFF);
		printf("Erase linux file system block !!\n");
	        printf("From 0x%X To 0x%X\n", PHYS_FLASH_2, e_end);
		flash_sect_erase(PHYS_FLASH_2, e_end);
#else //non 2880, 3052MP1
		// 0x3B0000 < linux image <= 0x7B0000
		e_end = CFG_FLASH_BASE + 0x50000 + NetBootFileXferSize;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux block !!\n");
	        printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, e_end);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, e_end);
#endif
#ifdef ON_BOARD_8M_FLASH_COMPONENT
	    } else {
		printf("***********************************\n");
		printf("The Image is bigger than 7872KB !! \n");
		printf("***********************************\n");
		break;
#else //16M
            } else if(NetBootFileXferSize <= 0xFB0000) {
#if defined (RT2880_ASIC_BOARD) || defined (RT2880_FPGA_BOARD) || defined (RT3052_MP1)
		// 0x7B0000 < linux image <= 0xFB0000
		e_end = PHYS_FLASH_2 + NetBootFileXferSize - 0x3B0000;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux kernel block !!\n");
		printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, CFG_FLASH_BASE+0x3FFFFF);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, CFG_FLASH_BASE+0x3FFFFF);
		printf("Erase linux file system block !!\n");
		printf("From 0x%X To 0x%X\n", PHYS_FLASH_2, e_end);
		flash_sect_erase(PHYS_FLASH_2, e_end);
#else //non 2880, 3052MP1
		// 0x7B0000 < linux image <= 0xFB0000
		e_end = CFG_FLASH_BASE + 0x50000 + NetBootFileXferSize;
		if (0 != get_addr_boundary(&e_end))
		    break;
		printf("Erase linux block !!\n");
		printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE+0x50000, e_end);
		flash_sect_erase(CFG_FLASH_BASE+0x50000, e_end);
#endif
	    } else {
		printf("***********************************\n");
		printf("The Image is bigger than 16064KB !! \n");
		printf("***********************************\n");
		break;
#endif
#endif
#endif
	    }

            //cp.linux
            argc = 4;
            argv[0]= "cp.linux";
            do_mem_cp(cmdtp, 0, argc, argv);

            //bootm bc050000
            argc= 2;
	    sprintf(addr_str, "0x%X", CFG_FLASH_BASE + 0x50000);
	    argv[1] = &addr_str[0];
            do_bootm(cmdtp, 0, argc, argv);            
            break;
            
#if 0
         case '7':
/* by bruce */
	    printf(" this version not allow write cramfs to flash \n" );
	    break;
            printf("   \n%d: System Load Linux FileSystem then write to Flash via TFTP. \n", SEL_LOAD_CRAMFS_WRITE_FLASH);
            printf(" Warning!! Erase Linux filesystm in Flash then burn new one. Are you sure?(Y/N)\n");
            confirm = getc();
            if (confirm != 'y' && confirm != 'Y') {
               printf(" Operation terminated\n");
               break;
            }
            argc= 3;
            tftp_config(SEL_LOAD_CRAMFS_WRITE_FLASH, argv);
           	setenv("autostart", "no");
            do_tftpb(cmdtp, 0, argc, argv);
         
            //erase cramfs
	    printf("\n Erase File System block !!\n From 0xBF530000 To 0xBF7FFFFF\n");
	    flash_sect_erase(0xBF530000, 0xBF7FFFFF);

            //cp.cramfs
            argc = 4;
            argv[0]= "cp.cramfs";
            do_mem_cp(cmdtp, 0, argc, argv);

            //bootm bf030000
            argc= 2;
            argv[1]= "0xbf030000";
            do_bootm(cmdtp, 0, argc, argv);            
            break;
#endif
                     
         case '4':
            printf("   \n%d: System Enter Boot Command Line Interface.\n", SEL_ENTER_CLI);
         	printf ("\n%s\n", version_string);
         	/* main_loop() can return to retry autoboot, if so just run it again. */
         	puts("\n main_loop !! \n");
         	for (;;) {					
         		main_loop ();
		}
            break;

         case '5':
            printf("   \n%d: System Load uCos to SDRAM via TFTP. \n", SEL_LOAD_UCOS_SDRAM);
            tftp_config(SEL_LOAD_UCOS_SDRAM, argv);
            argc= 3;
         	setenv("autostart", "yes");
            do_tftpb(cmdtp, 0, argc, argv);
            break;

         case '8':
            printf("   \n%d: System Load UBoot to SDRAM via TFTP. \n", SEL_LOAD_BOOT_SDRAM);
            tftp_config(SEL_LOAD_BOOT_SDRAM, argv);
            argc= 3;
         	setenv("autostart", "yes");
            do_tftpb(cmdtp, 0, argc, argv);
            break;

         case '9':
            printf("   \n%d: System Load Boot Loader then write to Flash via TFTP. \n", SEL_LOAD_BOOT_WRITE_FLASH);
            printf(" Warning!! Erase Boot Loader in Flash then burn new one. Are you sure?(Y/N)\n");
            confirm = getc();
            if (confirm != 'y' && confirm != 'Y') {
               printf(" Operation terminated\n");
               break;
            }
            tftp_config(SEL_LOAD_BOOT_WRITE_FLASH, argv);
            argc= 3;
         	setenv("autostart", "no");
            do_tftpb(cmdtp, 0, argc, argv);
            
            //protect off uboot
            flash_sect_protect(0, CFG_FLASH_BASE, CFG_FLASH_BASE+0x2FFFF);
            
            //erase uboot
            printf("\n Erase U-Boot block !!\n");
	    printf("From 0x%X To 0x%X\n", CFG_FLASH_BASE, CFG_FLASH_BASE+0x2FFFF);
            flash_sect_erase(CFG_FLASH_BASE, CFG_FLASH_BASE+0x2FFFF);
            
            //cp.uboot            
            argc = 4;
            argv[0]= "cp.uboot";
            do_mem_cp(cmdtp, 0, argc, argv);                       
            
            //protect on uboot
            flash_sect_protect(1, CFG_FLASH_BASE, CFG_FLASH_BASE+0x2FFFF);
            
            //reset            
            do_reset(cmdtp, 0, argc, argv);
            break;
            
         default:
#if 0
            printf("   \nSystem Boot Linux via Flash.\n");
            do_bootm(cmdtp, 0, 1, argv);
#else
            printf("   \n%d: System Load Linux to SDRAM via TFTP. \n", SEL_LOAD_LINUX_SDRAM);
            tftp_config_no_input(SEL_LOAD_LINUX_SDRAM, argv);
            argc= 3;
                setenv("autostart", "yes");
            do_tftpb(cmdtp, 0, argc, argv);
 
#endif
            break;            
   	} /* end of switch */   
   	
   	do_reset(cmdtp, 0, argc, argv);
   	
   } /* end of else */
	
	/* NOTREACHED - no way out of command loop except booting */
}


void hang (void)
{
	puts ("### ERROR ### Please RESET the board ###\n");
	for (;;);
}
